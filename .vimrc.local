colorscheme Tomorrow-Night
"color molokai
set guifont=Monospace:h12
set history=2000
set nospell  
set nofoldenable
set fileformats=unix
set shiftwidth=2 " Use indents of 2 spaces
nnoremap <silent> <leader>h :noh<CR>
" CTRL-Tab is next tab
noremap <C-Tab> :<C-U>tabnext<CR>
inoremap <C-Tab> <C-\><C-N>:tabnext<CR>
cnoremap <C-Tab> <C-C>:tabnext<CR>
" CTRL-SHIFT-Tab is previous tab
noremap <C-S-Tab> :<C-U>tabprevious<CR>
inoremap <C-S-Tab> <C-\><C-N>:tabprevious<CR>
cnoremap <C-S-Tab> <C-C>:tabprevious<CR>

if isdirectory(expand("~/.vim/bundle/nerdtree"))
    "map <leader>j :NERDTreeToggle<CR>
    map <leader>j <plug>NERDTreeTabsToggle<CR>
    let NERDTreeQuitOnOpen=0
endif
if isdirectory(expand("~/.vim/bundle/tagbar/"))
    nnoremap <silent> <leader>k :TagbarToggle<CR>
endif
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end
if !exists("g:spf13_no_big_font")
    if LINUX() && has("gui_running")
        set guifont=Andale\ Mono\ Regular\ 10,Menlo\ Regular\ 10,Consolas\ Regular\ 10,Courier\ New\ Regular\ 10
    elseif OSX() && has("gui_running")
        set guifont=Andale\ Mono\ Regular:h12,Menlo\ Regular:h12,Consolas\ Regular:h12,Courier\ New\ Regular:h12
    elseif WINDOWS() && has("gui_running")
        set guifont=Andale_Mono:h10,Menlo:h10,Consolas:h10,Courier_New:h10
    endif
endif

"if count(g:spf13_bundle_groups, 'go')
    "let g:go_highlight_functions = 1
    "let g:go_highlight_methods = 1
    "let g:go_highlight_structs = 1
    "let g:go_highlight_operators = 1
    "let g:go_highlight_build_constraints = 1
    "let g:go_fmt_command = "gofmt"
    "let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
    "let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
    "au FileType go nmap <Leader>s <Plug>(go-implements)
    "au FileType go nmap <Leader>i <Plug>(go-info)
    "au FileType go nmap <Leader>e <Plug>(go-rename)
    "au FileType go nmap <leader>r <Plug>(go-run)
    "au FileType go nmap <leader>b <Plug>(go-build)
    "au FileType go nmap <leader>t <Plug>(go-test)
    "au FileType go nmap <Leader>gd <Plug>(go-doc)
    "au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
    "au FileType go nmap <leader>co <Plug>(go-coverage)
"endif

